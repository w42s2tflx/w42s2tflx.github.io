<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSES Problem Set</title>
    <link href="/2025/01/01/002/"/>
    <url>/2025/01/01/002/</url>
    
    <content type="html"><![CDATA[<p>题集链接：<a href="https://cses.fi/problemset/">CSES - CSES Problem Set - Tasks</a></p><p>只记录我觉得比较好的题，包括解题思路和核心代码</p><span id="more"></span><h1>Introductory Problems</h1><h2 id="Grid-Paths">Grid Paths</h2><p>一开始想到 <code>DFS</code> 暴力枚举，枚举每一条可能的路径，但是运行时间太长了，要进行剪枝，我是在 <a href="https://usaco.guide/problems/cses-1625-grid-paths/solution">Solution - Grid Paths (CSES) · USACO Guide</a> 上找到相关题解的，这里给出了几个优化点</p><p>1.如果当前路径已经经过了左下角且当前步数不是最后一步，那么可以直接 <code>return</code></p><p>2.如果路径无法继续前进，但可以向左或向右转动，则网格将分裂为两部分，两部分都包含未访问的方格。很明显，我们不能再访问所有方格，可以直接 <code>return</code></p><p>用图来解释：假设我们目前在 <code>1</code> ， <code>0</code> 是还没有经过的位置，<code>#</code> 是已经经过或者不能走的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-number">000</span>#<br>##<span class="hljs-number">1</span>#<br><span class="hljs-number">000</span>#<br></code></pre></td></tr></table></figure><p>3.如果路径创建了一个不是左下角的死胡同，则路径将无法访问所有方格（路径可能在死胡同处停止或越过它，从而封闭一个方格）。因此，我们希望避免产生死胡同。例如，如果我们当前位置上方的方格三面被挡住（包括我们现在的位置），那么下一步必须往上，以避免造成死胡同。</p><p>用图来解释：如果两个 <code>?</code> 中至少有一个是 <code>#</code>  ，加上我们当前的位置，如果不往上走就会形成死胡同，其他方向的也是同理</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">0</span>#<span class="hljs-number">0</span>      <span class="hljs-number">0</span>#<span class="hljs-number">0</span>       <span class="hljs-number">0</span>#<span class="hljs-number">0</span>      <span class="hljs-number">0</span>#<span class="hljs-number">0</span><br>?<span class="hljs-number">0</span>? -----&gt;#<span class="hljs-number">00</span>-----&gt;#<span class="hljs-number">10</span>-----&gt;##<span class="hljs-number">1</span><br><span class="hljs-number">010</span>      <span class="hljs-number">1</span>#<span class="hljs-number">1</span>       <span class="hljs-number">0</span>#<span class="hljs-number">0</span>      <span class="hljs-number">0</span>#<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-e064c6af" role="button" aria-expanded="false" aria-controls="collapse-e064c6af">        <div class="fold-arrow">▶</div>代码      </div>      <div class="fold-collapse collapse" id="collapse-e064c6af">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>string t;<br><span class="hljs-type">bool</span> mp[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>];<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">char</span> ds[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> sx, <span class="hljs-type">int</span> sy, <span class="hljs-type">int</span> id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (sx &lt; <span class="hljs-number">1</span> || sx &gt; <span class="hljs-number">7</span> || sy &lt; <span class="hljs-number">1</span> || sy &gt; <span class="hljs-number">7</span> || mp[sx][sy])<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (sx == <span class="hljs-number">7</span> &amp;&amp; sy == <span class="hljs-number">1</span> &amp;&amp; id &lt; <span class="hljs-number">48</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (mp[sx - <span class="hljs-number">1</span>][sy] &amp;&amp; mp[sx + <span class="hljs-number">1</span>][sy] &amp;&amp; !mp[sx][sy + <span class="hljs-number">1</span>] &amp;&amp; !mp[sx][sy - <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (!mp[sx - <span class="hljs-number">1</span>][sy] &amp;&amp; !mp[sx + <span class="hljs-number">1</span>][sy] &amp;&amp; mp[sx][sy + <span class="hljs-number">1</span>] &amp;&amp; mp[sx][sy - <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (id == <span class="hljs-number">48</span>)<br>    &#123;<br>        ans++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    mp[sx][sy] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        <span class="hljs-keyword">if</span> (t[id] == ds[i])<br>            <span class="hljs-built_in">dfs</span>(sx + dx[i], sy + dy[i], id + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (t[id] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (sx &gt; <span class="hljs-number">2</span> &amp;&amp; mp[sx - <span class="hljs-number">2</span>][sy] &amp;&amp; !mp[sx - <span class="hljs-number">1</span>][sy] &amp;&amp; (mp[sx - <span class="hljs-number">1</span>][sy - <span class="hljs-number">1</span>] || mp[sx - <span class="hljs-number">1</span>][sy + <span class="hljs-number">1</span>]))<br>            <span class="hljs-built_in">dfs</span>(sx - <span class="hljs-number">1</span>, sy, id + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sx &lt; <span class="hljs-number">6</span> &amp;&amp; mp[sx + <span class="hljs-number">2</span>][sy] &amp;&amp; !mp[sx + <span class="hljs-number">1</span>][sy] &amp;&amp; (mp[sx + <span class="hljs-number">1</span>][sy - <span class="hljs-number">1</span>] || mp[sx + <span class="hljs-number">1</span>][sy + <span class="hljs-number">1</span>]))<br>            <span class="hljs-built_in">dfs</span>(sx + <span class="hljs-number">1</span>, sy, id + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sy &gt; <span class="hljs-number">2</span> &amp;&amp; mp[sx][sy - <span class="hljs-number">2</span>] &amp;&amp; !mp[sx][sy - <span class="hljs-number">1</span>] &amp;&amp; (mp[sx - <span class="hljs-number">1</span>][sy - <span class="hljs-number">1</span>] || mp[sx + <span class="hljs-number">1</span>][sy - <span class="hljs-number">1</span>]))<br>            <span class="hljs-built_in">dfs</span>(sx, sy - <span class="hljs-number">1</span>, id + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sy &lt; <span class="hljs-number">6</span> &amp;&amp; mp[sx][sy + <span class="hljs-number">2</span>] &amp;&amp; !mp[sx][sy + <span class="hljs-number">1</span>] &amp;&amp; (mp[sx - <span class="hljs-number">1</span>][sy + <span class="hljs-number">1</span>] || mp[sx + <span class="hljs-number">1</span>][sy + <span class="hljs-number">1</span>]))<br>            <span class="hljs-built_in">dfs</span>(sx, sy + <span class="hljs-number">1</span>, id + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>                <span class="hljs-built_in">dfs</span>(sx + dx[i], sy + dy[i], id + <span class="hljs-number">1</span>);<br>    &#125;<br>    mp[sx][sy] = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; t;<br>    <span class="hljs-built_in">memset</span>(mp, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(mp));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>        mp[i][<span class="hljs-number">0</span>] = mp[i][<span class="hljs-number">8</span>] = mp[<span class="hljs-number">0</span>][i] = mp[<span class="hljs-number">8</span>][i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h1>Sorting and Searching</h1><h1>Dynamic Programming</h1><h1>Graph Algorithms</h1><h1>Range Queries</h1><h1>Tree Algorithms</h1><h1>Mathematics</h1><h1>String Algorithms</h1><h1>Geometry</h1><h1>Advanced Techniques</h1><h1>Additional Problems</h1>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSES</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SICP学习记录：第一章 构建过程抽象</title>
    <link href="/2024/12/29/001/"/>
    <url>/2024/12/29/001/</url>
    
    <content type="html"><![CDATA[<p>本博客使用的 <code>scheme</code> 环境是 <code>chezscheme</code></p><span id="more"></span><p>(<code>define</code> (<code>name</code> <code>formal parameters</code>) (<code>body</code>))</p><p><code>define</code>可以定义一个变量的值，也可以是定义一个过程，<code>name</code>是过程名，<code>formal parameters</code>是该过程所用到的的形式参数，<code>body</code>是过程内容</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> size <span class="hljs-number">2</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">square</span> x) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x x))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">sum-of-squares</span> x y)<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name">square</span> x) (<span class="hljs-name">square</span> y)))<br></code></pre></td></tr></table></figure><p>应用序：所有被传入的实际参数都会立即被求值</p><p>正则序：传入的实际参数只有在有需要时才会被求值</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">f</span> a)<br>(<span class="hljs-name">sum-of-squares</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> a <span class="hljs-number">1</span>) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> a <span class="hljs-number">2</span>)))<br>(<span class="hljs-name">f</span> <span class="hljs-number">5</span>)<br><span class="hljs-number">136</span><br><span class="hljs-comment">;应用序求值过程</span><br>(<span class="hljs-name">f</span> <span class="hljs-number">5</span>)<br>(<span class="hljs-name">sum-of-squares</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">5</span> <span class="hljs-number">1</span>) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">5</span> <span class="hljs-number">2</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name">square</span> <span class="hljs-number">6</span>) (<span class="hljs-name">square</span> <span class="hljs-number">10</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">6</span> <span class="hljs-number">6</span>) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">10</span> <span class="hljs-number">10</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">36</span> <span class="hljs-number">100</span>)<br><span class="hljs-number">136</span><br><span class="hljs-comment">;正则序求值过程</span><br>(<span class="hljs-name">f</span> <span class="hljs-number">5</span>)<br>(<span class="hljs-name">sum-of-squares</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">5</span> <span class="hljs-number">1</span>) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">5</span> <span class="hljs-number">2</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name">square</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">5</span> <span class="hljs-number">1</span>)) (<span class="hljs-name">square</span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">5</span> <span class="hljs-number">2</span>)))<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">5</span> <span class="hljs-number">1</span>) (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">5</span> <span class="hljs-number">1</span>)) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">5</span> <span class="hljs-number">2</span>) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">5</span> <span class="hljs-number">2</span>)))<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">6</span> <span class="hljs-number">6</span>) (<span class="hljs-name"><span class="hljs-built_in">*</span></span> <span class="hljs-number">10</span> <span class="hljs-number">10</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">36</span> <span class="hljs-number">100</span>)<br><span class="hljs-number">136</span><br></code></pre></td></tr></table></figure><p>以下是一些语法的实现，值得说明的是，当前面的语句成立时，后面的语句是不会执行的</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">abs</span></span> x)<br>(<span class="hljs-name"><span class="hljs-built_in">cond</span></span> ((<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> x <span class="hljs-number">0</span>) x)<br>((<span class="hljs-name"><span class="hljs-built_in">=</span></span> x <span class="hljs-number">0</span>) <span class="hljs-number">0</span>)<br>((<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> x <span class="hljs-number">0</span>) (<span class="hljs-name"><span class="hljs-built_in">-</span></span> x))))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">abs</span></span> x)<br>(<span class="hljs-name"><span class="hljs-built_in">cond</span></span> ((<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> x <span class="hljs-number">0</span>) (<span class="hljs-name"><span class="hljs-built_in">-</span></span> x))<br>(<span class="hljs-name"><span class="hljs-built_in">else</span></span> x)))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">abs</span></span> x)<br>(<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> x <span class="hljs-number">0</span>)<br>(<span class="hljs-name"><span class="hljs-built_in">-</span></span> x)<br>x))<br>(<span class="hljs-name"><span class="hljs-built_in">and</span></span> (<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> x <span class="hljs-number">5</span>) (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> x <span class="hljs-number">10</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">&gt;=</span></span> x y)<br>(<span class="hljs-name"><span class="hljs-built_in">or</span></span> (<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> x y) (<span class="hljs-name"><span class="hljs-built_in">=</span></span> x y)))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">&gt;=</span></span> x y)<br>(<span class="hljs-name"><span class="hljs-built_in">not</span></span> (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> x y)))<br></code></pre></td></tr></table></figure><p><strong>练习 1.5</strong> 对于下面这段代码，分别在使用应用序求值方式和正则序求值方式的机器上执行会有什么结果？</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">p</span>) (<span class="hljs-name">p</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">test</span> x y)<br>(<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> x <span class="hljs-number">0</span>)<br><span class="hljs-number">0</span><br>y))<br>(<span class="hljs-name">test</span> <span class="hljs-number">0</span> (<span class="hljs-name">p</span>))<br></code></pre></td></tr></table></figure><p>首先，无论解释器使用的是什么求值方式，调用 <code>(p)</code> 总是进入一个无限循环，因为函数 <code>p</code> 会不断调用自身</p><p>在应用序中，所有被传入的实际参数都会立即被求值，因此，在使用应用序的解释器里执行 <code>(test 0 (p))</code> 时，实际参数 <code>0</code> 和 <code>(p)</code> 都会被求值，而对 <code>(p)</code> 的求值将使解释器进入无限循环，因此，如果一个解释器在运行时陷入停滞，那么这个解释器使用的是应用序求值模式</p><p>在正则序中，传入的实际参数只有在有需要时才会被求值，因此，在使用正则序的解释器里运行 <code>(test 0 (p))</code> 时， <code>0</code> 和 <code>(p)</code> 都不会立即被求值，当解释进行到 <code>if</code> 语句时，形式参数 <code>x</code> 的实际参数(也即是 <code>0</code>)会被求值(求值结果也是为 <code>0</code> )，然后和另一个 <code>0</code> 进行对比(<code>(= x 0)</code>)，因为对比的值为真(<code>#t</code>),所以 <code>if</code> 返回 <code>0</code> 作为值表达式的值，而这个值又作为 <code>test</code> 函数的值被返回。因此在正则序求值中，调用 <code>(p)</code> 从始到终都没有被执行，所以也就不会产生无限循环，因此，如果一个解释器在运行时顺利返回 <code>0</code> ，那么这个解释器使用的是正则序求值模式</p><p><strong>牛顿迭代法求平方根：</strong></p><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(x)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 的根，选取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 作为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的初始近似值，过点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_0,f(x_0))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span> 做曲线 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 的切线 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>:</mo><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>+</mo><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L: y = f(x_0) + f&#x27;(x_0)(x - x_0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 轴交点的横坐标为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub><mo>−</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_1 = x_0 - \frac{f(x_0)}{f&#x27;(x_0)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ,称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的一次近似值，过点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1, f(x_1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span> 做曲线 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y = f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 的切线，并求该切线与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 轴交点的横坐标 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_2 = x_1 - \frac{f(x_1)}{f&#x27;(x_1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ,称 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的二次近似值，重复以上过程，得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的近似值序列，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_{n+1} = x_n - \frac{f(x_n)}{f&#x27;(x_n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 次近似值。上述式称为<strong>牛顿迭代公式</strong></p><p>现在我们要求 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> 的平方根，实际上就是求 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">f(x)=x^2-t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span> ，满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f(x)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 的解，对于公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>n</mi></msub><mo>−</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">x_{n+1}=x_{n}-\frac{f(x_n)}{f&#x27;(x_n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6828em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>x</mi></mrow><annotation encoding="application/x-tex">f&#x27;(x)=2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span></span></span></span> ，代入原式可得</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo>+</mo><mfrac><mi>t</mi><msub><mi>x</mi><mi>n</mi></msub></mfrac><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">x_{n+1}=\frac{(x_n+\frac{t}{x_{n}})}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3457em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6597em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.8351em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8246em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 作为初始值，然后不断迭代求近似解</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">abs</span></span> x)<br>  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> x <span class="hljs-number">0</span>)<br>    (<span class="hljs-name"><span class="hljs-built_in">-</span></span> x)<br>    x))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">square</span> guess)<br>  (<span class="hljs-name"><span class="hljs-built_in">*</span></span> guess guess))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">average</span> x y)<br>  (<span class="hljs-name"><span class="hljs-built_in">/</span></span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> x y) <span class="hljs-number">2</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">improve</span> guess x)<br>  (<span class="hljs-name">average</span> guess (<span class="hljs-name"><span class="hljs-built_in">/</span></span> x guess)))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">good-enough?</span> guess x)<br>  (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> (<span class="hljs-name"><span class="hljs-built_in">abs</span></span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> (<span class="hljs-name">square</span> guess) x)) <span class="hljs-number">0.001</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">sqrt-iter</span> guess x)<br>  (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name">good-enough?</span> guess x)<br>    guess<br>    (<span class="hljs-name">sqrt-iter</span> (<span class="hljs-name">improve</span> guess x) x)))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name"><span class="hljs-built_in">sqrt</span></span> x)<br>  (<span class="hljs-name">sqrt-iter</span> <span class="hljs-number">1.0</span> x))<br>(<span class="hljs-name"><span class="hljs-built_in">display</span></span> (<span class="hljs-name"><span class="hljs-built_in">sqrt</span></span> <span class="hljs-number">2</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">newline</span></span>)<br></code></pre></td></tr></table></figure><p><strong>练习 1.6</strong> 将上述求平方根的 <code>sqrt-iter</code> 函数替换成如下，会发生什么？</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">new-if</span> predicate then-clause else-clause)<br>(<span class="hljs-name"><span class="hljs-built_in">cond</span></span> (<span class="hljs-name">predicate</span> then-clause)<br>(<span class="hljs-name"><span class="hljs-built_in">else</span></span> else-clause)))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">sqrt-iter</span> guess x)<br>(<span class="hljs-name">new-if</span> (<span class="hljs-name">good-enough?</span> guess x)<br>guess<br>(<span class="hljs-name">sqrt-iter</span> (<span class="hljs-name">improve</span> guess x) x)))<br></code></pre></td></tr></table></figure><p><code>if</code> 语句是一种特殊形式，当它的 <code>predicate</code> 部分为真时， <code>then-clause</code> 分支会被求值，否则的话， <code>else-clause</code> 分支被求值，两个 <code>clause</code> 只有一个会被求值，而新定义的 <code>new-if</code> 只是一个普通函数，它没有 <code>if</code> 所具有的特殊形式，根据解释器所使用的应用序求值规则，每个函数的实际参数在传入的时候都会被求值，因此，当使用 <code>new-if</code> 函数时，无论 <code>predicate</code> 是真还是假， <code>then-clause</code> 和 <code>else-clause</code> 两个分支都会被求值</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">if</span></span> <span class="hljs-literal">#t</span> <br>  (<span class="hljs-name"><span class="hljs-built_in">display</span></span> <span class="hljs-string">&quot;good&quot;</span>)<br>  (<span class="hljs-name"><span class="hljs-built_in">display</span></span> <span class="hljs-string">&quot;bad&quot;</span>))<br><span class="hljs-comment">;good</span><br>(<span class="hljs-name">new-if</span> <span class="hljs-literal">#t</span><br>  (<span class="hljs-name"><span class="hljs-built_in">display</span></span> <span class="hljs-string">&quot;good&quot;</span>)<br>  (<span class="hljs-name"><span class="hljs-built_in">display</span></span> <span class="hljs-string">&quot;bad&quot;</span>))<br><span class="hljs-comment">;;badgood</span><br></code></pre></td></tr></table></figure><p>因此如果使用 <code>new-if</code> ，程序会无限递归下去，直到进程崩溃</p><p class="note note-info" style="text-align:left">Note:你可能对 new-if 的输出感到疑惑，为什么 “bad” 会在 “good” 之前输出？事实是，函数式编程语言的解释器实现一般对参数的求值顺序并没有特定的规则，从左向右求值或从右向左求值都是可能的使用不同的 Scheme 实现，打印的结果可能不同</p><p><strong>练习 1.7</strong> <code>good-enough?</code> 对于查找非常小的数的平方根不是很有效。此外，在真实的计算机中，算术运算几乎总是以有限的精度执行。这使得测试不适用于非常大的数字。解释这些语句，并举例说明对于小数和大数，测试是如何失败的。改进 <code>good-enough?</code> 就是观察猜测从一次迭代到下一次迭代是如何变化的，当变化只占猜测的很小一部分时就停止</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">display</span></span> (<span class="hljs-name"><span class="hljs-built_in">sqrt</span></span> <span class="hljs-number">0.000009</span>))<br><span class="hljs-comment">;实际上应该是0.003，因为0.03的平方与0.000009的绝对值之差小于设定0.001</span><br><span class="hljs-number">0.03134584760656851</span><br>(<span class="hljs-name"><span class="hljs-built_in">display</span></span> (<span class="hljs-name"><span class="hljs-built_in">sqrt</span></span> <span class="hljs-number">9</span>e300))<br><span class="hljs-comment">;死循环，由于精度不足而一直达不到最佳猜测值，导致死循环</span><br></code></pre></td></tr></table></figure><p>要避免这一错误，对 <code>good-enough?</code> 进行修改：不再检测猜测值 <code>guess</code> 的平方与 <code>x</code> 之间的差，而是检测新旧两次猜测值之间的比率，当比率变化非常小时，程序就停止 <code>improve</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">good-enough?</span> new-guess old-guess)<br>    (<span class="hljs-name"><span class="hljs-built_in">&gt;</span></span> <span class="hljs-number">0.01</span><br>        (<span class="hljs-name"><span class="hljs-built_in">/</span></span> (<span class="hljs-name"><span class="hljs-built_in">abs</span></span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> new-guess old-guess))<br>        old-guess)))<br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">sqrt-iter</span> guess x)<br>    (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name">good-enough?</span> guess (<span class="hljs-name">improve</span> guess x))  <br>        (<span class="hljs-name">improve</span> guess x)<br>        (<span class="hljs-name">sqrt-iter</span> (<span class="hljs-name">improve</span> guess x)<br>                   x)))<br>(<span class="hljs-name"><span class="hljs-built_in">display</span></span> (<span class="hljs-name"><span class="hljs-built_in">sqrt</span></span> <span class="hljs-number">0.000009</span>))<br><span class="hljs-number">0.0030000276392750298</span><br>(<span class="hljs-name"><span class="hljs-built_in">display</span></span> (<span class="hljs-name"><span class="hljs-built_in">sqrt</span></span> <span class="hljs-number">9</span>e300))<br><span class="hljs-number">3.0000001571093547</span>e<span class="hljs-number">150</span><br></code></pre></td></tr></table></figure><p>求快速幂，其中 <code>modulo</code> 或者 <code>remainder</code> 用来求余数，<code>zero?</code> 判断是否是零</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">fast-pow</span> x n)<br>(<span class="hljs-name"><span class="hljs-built_in">cond</span></span> ((<span class="hljs-name"><span class="hljs-built_in">=</span></span> n <span class="hljs-number">1</span>) x)<br>((<span class="hljs-name"><span class="hljs-built_in">zero?</span></span> (<span class="hljs-name"><span class="hljs-built_in">modulo</span></span> n <span class="hljs-number">2</span>)) (<span class="hljs-name">square</span> (<span class="hljs-name">fast-pow</span> x (<span class="hljs-name"><span class="hljs-built_in">/</span></span> n <span class="hljs-number">2</span>))))<br>(<span class="hljs-name"><span class="hljs-built_in">else</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x (<span class="hljs-name">fast-pow</span> x (<span class="hljs-name"><span class="hljs-built_in">-</span></span> n <span class="hljs-number">1</span>))))))<br></code></pre></td></tr></table></figure><p><code>chezscheme</code> 获取当前时间戳</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> current-timestamp (<span class="hljs-name">current-time</span>))<br>(<span class="hljs-name"><span class="hljs-built_in">display</span></span> current-timestamp)<br></code></pre></td></tr></table></figure><p>(<code>lambda</code> (<code>formal parameters</code>) (<code>body</code>))</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">plus4</span> x) (<span class="hljs-name"><span class="hljs-built_in">+</span></span> x <span class="hljs-number">4</span>))<br><span class="hljs-comment">;等价于</span><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> plus4 (<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> (x) (<span class="hljs-name"><span class="hljs-built_in">+</span></span> x <span class="hljs-number">4</span>)))<br>((<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> (x y z) (<span class="hljs-name"><span class="hljs-built_in">+</span></span> x y (<span class="hljs-name">square</span> z))) <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)<span class="hljs-comment">;12</span><br></code></pre></td></tr></table></figure><p>与 <code>define</code> 类似，不过不需要为过程取名</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mi>y</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mi>y</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>a</mi><mo>=</mo><mn>1</mn><mo>+</mo><mi>x</mi><mi>y</mi><mspace linebreak="newline"></mspace><mi>b</mi><mo>=</mo><mn>1</mn><mo>−</mo><mi>y</mi><mspace linebreak="newline"></mspace><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mi>y</mi><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">f(x,y)=x(1+xy)^2+y(1-y)+(1+xy)(1-y)\newlinea=1+xy\newlineb=1-y\newlinef(x,y)=xa^2+y*b+ab</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6597em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">ab</span></span></span></span></span></p><p>分别用 <code>define</code> 和 <code>lambda</code> 写这个过程</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scheme"><span class="hljs-comment">;纯define</span><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">f</span> x y)<br>    (<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">f-helper</span> a b)<br>        (<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x (<span class="hljs-name">square</span> a))<br>            (<span class="hljs-name"><span class="hljs-built_in">*</span></span> y b)<br>        (<span class="hljs-name"><span class="hljs-built_in">*</span></span> a b)))<br>    (<span class="hljs-name">f-helper</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x y)) <br>        (<span class="hljs-name"><span class="hljs-built_in">-</span></span> <span class="hljs-number">1</span> y)))<br><span class="hljs-comment">;lamba</span><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">f</span> x y)<br>    ((<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> (a b)<br>       (<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x (<span class="hljs-name">square</span> a))<br>            (<span class="hljs-name"><span class="hljs-built_in">*</span></span> y b)<br>            (<span class="hljs-name"><span class="hljs-built_in">*</span></span> a b)))<br>    (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x y))<br>    (<span class="hljs-name"><span class="hljs-built_in">-</span></span> <span class="hljs-number">1</span> y)))<br><span class="hljs-comment">;let</span><br>(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">f</span> x y)<br>    (<span class="hljs-name"><span class="hljs-built_in">let</span></span> ((<span class="hljs-name">a</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x y)))<br>            (<span class="hljs-name">b</span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> <span class="hljs-number">1</span> y)))<br>        (<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x (<span class="hljs-name">square</span> a))<br>            (<span class="hljs-name"><span class="hljs-built_in">*</span></span> y b)<br>            (<span class="hljs-name"><span class="hljs-built_in">*</span></span> a b))))<br></code></pre></td></tr></table></figure><p>对于 <code>lambda</code> 和 <code>let</code> 更一般的形式</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scheme">((<span class="hljs-name"><span class="hljs-built_in">lambda</span></span> (&lt;var1&gt; ...&lt;varn&gt;)<br>    &lt;body&gt;)<br>    &lt;exp1&gt; ...&lt;expn&gt;) <br><span class="hljs-comment">;var是形式参数，exp是实际参数</span><br>(<span class="hljs-name"><span class="hljs-built_in">let</span></span> ((<span class="hljs-name">&lt;var1&gt;</span> &lt;expr1&gt;)<br>      (<span class="hljs-name">&lt;var2&gt;</span> &lt;expr2&gt;)<br>      ...<br>      (<span class="hljs-name">varn</span> &lt;exprn&gt;))<br>  &lt;body&gt;)<br></code></pre></td></tr></table></figure><p>说明一下 <code>let</code> 的一些特性</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name"><span class="hljs-built_in">let</span></span> ((<span class="hljs-name">x</span> <span class="hljs-number">3</span>))<br>        (<span class="hljs-name"><span class="hljs-built_in">+</span></span> x (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x <span class="hljs-number">10</span>)))<br>    x)<br>(<span class="hljs-name"><span class="hljs-built_in">let</span></span> ((<span class="hljs-name">x</span> <span class="hljs-number">3</span>)<br>    (<span class="hljs-name">y</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> x <span class="hljs-number">2</span>)))<br>    (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x y))<br><span class="hljs-comment">;如果x的值为2，输出分别为35和12</span><br></code></pre></td></tr></table></figure><p>第一个程序中 <code>let</code> 里面的 <code>x</code> 被设置为3，而 <code>let</code> 外面的依然是2,这是因为 <code>let</code> 允许将变量绑定到尽可能局部的使用它们的地方<br>第二个程序中， <code>x</code> 被设置为3,但 <code>y</code> 被设置为4,这是因为当为局部变量提供值的表达式依赖于与局部变量本身具有相同名称的变量时，变量的值在 <code>let</code> 之外计算</p><h1>是</h1>]]></content>
    
    
    <categories>
      
      <category>Computer Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SICP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新的开始</title>
    <link href="/2022/05/04/begin/"/>
    <url>/2022/05/04/begin/</url>
    
    <content type="html"><![CDATA[<p>2022 年 5 月 4 日，我产生了建立了个人博客的想法<span id="more"></span>，希望能记录一点东西，多年以后回想起来，不会觉得虚度光阴，这几年来，博客断断续续也更新了许多，但是由于我的完美主义，认为之前写的东西不算很好，于是几乎全部删掉重写，说实话，有些后悔，虽然还有一些痕迹，但总觉得自己的一部分消失了，再也找不回了。</p><p>这几年也经历了许多事情，碌碌无为，一事无成，而且我还是浑浑噩噩，没有找到一个事物来消耗我的所有热情，总是渴望活在别人的生活里，借此逃离自己的生活。每天都会浪费很多时间在无意义的人与事，回忆过去而悔恨，然后放纵自己的人生，然后陷入更大的悔恨。</p><p>人生是用来体验的，不是用来演绎完美的。如果你因失去太阳而流泪，那么你也将失去繁星。我也没有什么伟大的理想，只想做我喜欢的事，把时间分给对这个世界的热爱，以及永远铭记生活的美好。请把至今为止的过去都付诸流水吧，我只想被我所爱的事物定义，而不是我憎恨的，我认为<code>You are what you love</code>。希望通过这个博客，留下一些有意义，值得回顾的东西。</p><p>这是我的算法刷题初始化模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/extc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e6</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">typedef</span> tree&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, null_type, less&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, rb_tree_tag,<br>             tree_order_statistics_node_update&gt;<br>    ordered_set;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">&#x27;\n&#x27;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lep(a, b, c) for (int a = b; a &lt;= c; a++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(a, b, c) for (int a = b; a &gt;= c; a--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a, b) cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//cin.sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);</span><br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; T; i++)<br>        <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
